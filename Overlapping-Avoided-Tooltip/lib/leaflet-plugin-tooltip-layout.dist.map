{"version":3,"sources":["index.js"],"names":["initialize","removeAllPolyline","map","markerList","polylineList","_onPolylineCreated","leafletMap","markerlist","onPolylineCreated","on","layoutByForce","setEdgePosition","i","length","removeLayer","drawLine","marker","markerPosition","getPosition","_icon","labelDom","getTooltip","_container","labelPosition","x1","x","y1","y","offsetWidth","offsetHeight","lineDest","L","point","destLatLng","layerPointToLatLng","ply","polyline","getLatLng","__ply","push","addTo","setRandomPos","angle","Math","PI","dest","ceil","sin","cos","DomUtil","setPosition","scaleTo","a","b","normalize","l","distanceTo","fa","k","fr","el","translateString","style","transform","split","parseInt","computePositionStep","t","area","v_pos","v","window","innerWidth","innerHeight","sqrt","dpos","disp","j","u","u_pos","subtract","add","multiplyBy","p","d","min","abs","setTransform","start","times","bounds","getBounds","northWest","latLngToLayerPoint","getNorthWest","southEast","getSouthEast","tooltip","width","height","isEdge"],"mappings":"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","file":"leaflet-plugin-tooltip-layout.dist.map","sourceRoot":"..\\..\\lib","sourcesContent":["// global variables\nlet map;\nlet markerList = []; // all markers here\nlet polylineList = []; // all polylines here\n\n// events\nlet _onPolylineCreated = null; // will be called after polyline has been created\n\nexport function initialize(leafletMap, markerlist, onPolylineCreated) {\n  map = leafletMap;\n  markerList = markerlist;\n  _onPolylineCreated = onPolylineCreated;\n  polylineList = [];\n\n  // event registrations\n  map.on('zoomstart', function() {\n    removeAllPolyline(map);\n  });\n\n  map.on('zoomend', function() {\n    setRandomPos(map);\n    layoutByForce();\n    setEdgePosition();\n    drawLine(map);\n  });\n\n  map.on('dragend', function() {\n    removeAllPolyline(map);\n    setRandomPos(map);\n    layoutByForce();\n    setEdgePosition();\n    drawLine(map);\n  });\n\n  map.on('resize', function() {\n    removeAllPolyline(map);\n    setRandomPos(map);\n    layoutByForce();\n    setEdgePosition();\n    drawLine(map);\n  });\n}\n\nexport function removeAllPolyline(map) {\n  var i;\n  for (i = 0; i < polylineList.length; i++) {\n    map.removeLayer(polylineList[i]);\n  }\n  polylineList = [];\n}\n\n/**\n * Draw lines between markers and tooltips\n * @param map leaflet map\n */\nfunction drawLine(map) {\n  removeAllPolyline(map);\n  for (var i = 0; i < markerList.length; i++) {\n    var marker = markerList[i];\n    var markerDom = marker._icon;\n    var markerPosition = getPosition(markerDom);\n    var label = marker.getTooltip();\n\n    var labelDom = label._container;\n    var labelPosition = getPosition(labelDom);\n\n    var x1 = labelPosition.x;\n    var y1 = labelPosition.y;\n\n    var x = markerPosition.x;\n    var y = markerPosition.y;\n\n    x1 -= 5;\n    y1 += 2;\n    if (x1 - x !== 0 || y1 - y !== 0) {\n      if (x1 + labelDom.offsetWidth < markerPosition.x) {\n        x1 += labelDom.offsetWidth;\n      }\n      if (y1 + labelDom.offsetHeight < markerPosition.y) {\n        y1 += labelDom.offsetHeight;\n      }\n      var lineDest = L.point(x1, y1);\n      var destLatLng = map.layerPointToLatLng(lineDest);\n\n      setTimeout(\n        ((marker, destLatLng) => () => {\n          let ply = L.polyline([marker.getLatLng(), destLatLng]);\n          _onPolylineCreated && _onPolylineCreated(ply);\n          marker.__ply = ply;\n          polylineList.push(ply);\n          ply.addTo(map);\n        })(marker, destLatLng),\n        0\n      );\n    }\n  }\n}\n\nfunction setRandomPos() {\n  for (var i = 0; i < markerList.length; i++) {\n    var marker = markerList[i];\n    var label = marker.getTooltip();\n    var labelDom = label._container;\n    var markerDom = marker._icon;\n    var markerPosition = getPosition(markerDom);\n    // var angle = Math.floor(Math.random() * 19 + 1) * 2 * Math.PI / 20;\n    var angle = ((2 * Math.PI) / 6) * i;\n    var x = markerPosition.x;\n    var y = markerPosition.y;\n    var dest = L.point(\n      Math.ceil(x + 50 * Math.sin(angle)),\n      Math.ceil(y + 50 * Math.cos(angle))\n    );\n    L.DomUtil.setPosition(labelDom, dest);\n  }\n}\n\nfunction scaleTo(a, b) {\n  return L.point(a.x * b.x, a.y * b.y);\n}\n\nfunction normalize(a) {\n  var l = a.distanceTo(L.point(0, 0));\n  if (l === 0) {\n    return a;\n  }\n  return L.point(a.x / l, a.y / l);\n}\n\nfunction fa(x, k) {\n  return (x * x) / k;\n}\n\nfunction fr(x, k) {\n  return (k * k) / x;\n}\n\n/**\n * get position form el.style.transform\n */\nfunction getPosition(el) {\n  var translateString = el.style.transform\n    .split('(')[1]\n    .split(')')[0]\n    .split(',');\n  return L.point(parseInt(translateString[0]), parseInt(translateString[1]));\n}\n\n/**\n * t is the temperature in the system\n */\nfunction computePositionStep(t) {\n  var area = (window.innerWidth * window.innerHeight) / 10;\n  var k = Math.sqrt(area / markerList.length);\n  var dpos = L.point(0, 0);\n  var v_pos;\n  var v;\n  var i;\n\n  for (i = 0; i < markerList.length; i++) {\n    v = markerList[i];\n    // get position of label v\n    v.disp = L.point(0, 0);\n    v_pos = getPosition(v.getTooltip()._container);\n\n    // compute gravitational force\n    for (var j = 0; j < markerList.length; j++) {\n      var u = markerList[j];\n      if (i !== j) {\n        var u_pos = getPosition(u.getTooltip()._container);\n        dpos = v_pos.subtract(u_pos);\n        if (dpos !== 0) {\n          v.disp = v.disp.add(\n            normalize(dpos).multiplyBy(fr(dpos.distanceTo(L.point(0, 0)), k))\n          );\n        }\n      }\n    }\n  }\n\n  // compute force between marker and tooltip\n  for (i = 0; i < markerList.length; i++) {\n    v = markerList[i];\n    v_pos = getPosition(v.getTooltip()._container);\n    dpos = v_pos.subtract(getPosition(v._icon));\n    v.disp = v.disp.subtract(\n      normalize(dpos).multiplyBy(fa(dpos.distanceTo(L.point(0, 0)), k))\n    );\n  }\n\n  // calculate layout\n  for (i = 0; i < markerList.length; i++) {\n    var disp = markerList[i].disp;\n    var p = getPosition(markerList[i].getTooltip()._container);\n    var d = scaleTo(\n      normalize(disp),\n      L.point(Math.min(Math.abs(disp.x), t), Math.min(Math.abs(disp.y), t))\n    );\n    p = p.add(d);\n    p = L.point(Math.ceil(p.x), Math.ceil(p.y));\n    L.DomUtil.setTransform(markerList[i].getTooltip()._container, p);\n  }\n}\n\nfunction layoutByForce() {\n  var start = Math.ceil(window.innerWidth / 10);\n  var times = 50;\n  var t;\n  for (var i = 0; i < times; i += 1) {\n    t = start * (1 - i / (times - 1));\n    computePositionStep(t);\n  }\n}\n\nfunction setEdgePosition() {\n  var bounds = map.getBounds();\n  var northWest = map.latLngToLayerPoint(bounds.getNorthWest());\n  var southEast = map.latLngToLayerPoint(bounds.getSouthEast());\n\n  for (let i = 0; i < markerList.length; i++) {\n    var tooltip = getPosition(markerList[i].getTooltip()._container);\n    var marker = getPosition(markerList[i]._icon);\n    var width = markerList[i].getTooltip()._container.offsetWidth;\n    var height = markerList[i].getTooltip()._container.offsetHeight;\n\n    var isEdge = false;\n    if (marker.x > northWest.x && tooltip.x < northWest.x) {\n      tooltip.x = northWest.x;\n      isEdge = true;\n    } else if (marker.x < southEast.x && tooltip.x > southEast.x - width) {\n      tooltip.x = southEast.x - width;\n      isEdge = true;\n    }\n\n    if (marker.y > northWest.y && tooltip.y < northWest.y) {\n      tooltip.y = northWest.y;\n      isEdge = true;\n    } else if (marker.y < southEast.y && tooltip.y > southEast.y - height) {\n      tooltip.y = southEast.y - height;\n      isEdge = true;\n    }\n\n    if (!isEdge) {\n      if (marker.x < northWest.x && tooltip.x > northWest.x - width) {\n        tooltip.x = northWest.x - width;\n      } else if (marker.x > southEast.x && tooltip.x < southEast.x) {\n        tooltip.x = southEast.x;\n      }\n\n      if (marker.y < northWest.y && tooltip.y > northWest.y - height) {\n        tooltip.y = northWest.y - height;\n      } else if (marker.y > southEast.y && tooltip.y < southEast.y) {\n        tooltip.y = southEast.y;\n      }\n    }\n\n    L.DomUtil.setTransform(markerList[i].getTooltip()._container, tooltip);\n  }\n}\n"]}